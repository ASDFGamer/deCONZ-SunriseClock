Problems:
    The light interfaces should extend from one interface so that e.g. endpoint.getLightsOfInterface is possible. It doesnt has to be the abstract light superclass.


Model:
    Lights:

        Interfaces for all Properties (OnOff, Dimmable, Color Saturation, Full Color)
            Interfaces that cant be active at the same time inherit from a super intercface (e.g. Color Sat and Full Color inherit from Color)
            The interfaces define the getter and setter methods.
                All of these Method take as last argument an callback
        abstract Classes for all combinations of these
            exept the Interfaces that inherit from the same super interface. These are not combined together
        All abstract classes extend an abstract light superclass
            This has the methods getEndpoint and getName 
    Groups:
        abstract Class
        Methods:
            turnOn/turnOff
    Abstract Endpoint:
        abstract Class:
            Data is only retrieved at the start.
            Constructor:
                takes an file with configurations for that endpoint.
            Methods:
                List<Group> getGroups
                Map<Light.class,List<Light(of that class)>> getLights
                T extends Light List<T> getLightsOfClass(T class)
                T extends ? List<T> getLightsOfInterface(T interface)


The Type of the Endpoint and the filename for the Enpoint Config is stored in some central settings.